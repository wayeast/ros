<launch>
  <!-- **************************************************
        The basic create node for controlling the base
       *************************************************
    -->
  <node
    pkg="create_node"
    type="turtlebot_node.py"
    name="turtlebot_node"
    output="screen"
  />

  <!-- ***************************************************
        Velocity command multiplexer copied from handout
       ***************************************************
    -->
  <node
    pkg="nodelet"
    type="nodelet"
    name="cmd_vel_mux"
    args="standalone yocs_cmd_vel_mux/CmdVelMuxNodelet"
  >
  <param
     name="yaml_cfg_file" 
     value="$(find turtlebot_bringup)/param/mux.yaml"
  />
  <remap
    from="cmd_vel_mux/input/teleop"
    to="turtlebot_teleop/cmd_vel"
  />
  <remap
    from="cmd_vel_mux/output"
    to="cmd_vel"
  />
  </node>

  <!-- *****************************************************
        Robot description stuff (parameter copied from handout)
       *****************************************************
     -->
  <param
    name="robot_description"
    command="$(find xacro)/xacro.py
             $(find turtlebot_description)/robots/create_circles_kinect.urdf.xacro"
  />
  <node
    pkg="robot_state_publisher"
    type="robot_state_publisher"
    name="robot_state_publisher"
  />

  <!-- *****************************************************
        Diagnostic aggregator
       *****************************************************
    -->
  <node
    pkg="diagnostic_aggregator"
    type="aggregator_node"
    name="diagnostic_aggregator"
  >
    <rosparam
      command="load"
      file="$(find turtlebot_bringup)/param/create/diagnostics.yaml"
    />
  </node>

  <!-- *****************************************************
        Extended Kalman Filter
       *****************************************************
   -->
  <node
     pkg="robot_pose_ekf"
     type="robot_pose_ekf"
     name="robot_pose_ekf"
  >
    <remap from="imu_data" to="imu/data"/>
    <param name="freq" value="10.0"/>
    <param name="sensor_timeout" value="1.0"/>
    <param name="publish_tf" value="true"/>
    <param name="odom_used" value="true"/>
    <param name="imu_used" value="true"/>
    <param name="vo_used" value="false"/>
    <param name="output_frame" value="odom"/>
  </node>

  <!-- *****************************************************
        Enable Kinect power supply from create base
       *****************************************************
   -->
  <node
    pkg="create_node"
    type="kinect_breaker_enabler.py"
    name="kinect_breaker_enabler"
  />

  <!-- ****************************************************
        Kinect driver
       ****************************************************
   -->
  <include file="$(find openni_launch)/launch/openni.launch">
    <arg name="camera" value="camera"/>
    <arg name="publish_tf" value="true"/>
    <arg name="depth_registration" value="false"/>
    <arg name="num_worker_threads" value="4" />
    <arg name="rgb_processing" value="true"/>
    <arg name="ir_processing" value="false"/>
    <arg name="depth_processing" value="false"/>
    <arg name="depth_registered_processing" value="false"/>
    <arg name="disparity_processing" value="false"/>
    <arg name="disparity_registered_processing" value="false"/>
  </include>

  <!-- *****************************************************
        Kinect to LaserScan message
       *****************************************************
   -->
  <node
    pkg="nodelet"
    type="nodelet"
    name="depthimage_to_laserscan"
    args="standalone depthimage_to_laserscan/DepthImageToLaserScanNodelet"
  >
    <param name="scan_height" value="10"/>
    <param name="output_frame_id" value="camera_depth_frame"/>
    <param name="range_min" value="0.45"/>
    <remap from="image" to="camera/depth/image_raw"/>
  </node>

  <node
    pkg="bokinsky_liles_wu_project3"
    type="project3_node"
    name="wifi_reporter"
   />

</launch>
